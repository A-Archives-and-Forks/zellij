// This file contains conversion code between `FileToOpen` and `ProtobufFile`
// `FileToOpen` - this is the struct used by both Zellij and Rust plugins
// `ProtobufFile` - this is the struct generated by the `.proto` file and used for serialization
// across the wasm boundary
//
// SDK authors in other languages should generate their own equivalent structures based on the
// `.proto` specification, and then decode the protobuf over the wire into them

pub use super::generated_api::api::file::{File as ProtobufFile, file::{OptionalLineNumber, OptionalCwd}};
use crate::data::FileToOpen;

use std::convert::TryFrom;
use std::path::PathBuf;

impl TryFrom<ProtobufFile> for FileToOpen {
   type Error = &'static str;
   fn try_from(protobuf_file: ProtobufFile) -> Result<Self, &'static str> {
       let path = PathBuf::from(protobuf_file.path);
       let line_number = protobuf_file.optional_line_number.map(|l| {
           match l {
               OptionalLineNumber::LineNumber(l) => l as usize
           }
       });
       let cwd = protobuf_file.optional_cwd.map(|c| {
           match c {
               OptionalCwd::Cwd(c) => PathBuf::from(c)
           }
       });
       Ok(FileToOpen {
           path,
           line_number,
           cwd,
       })
   }
}

impl TryFrom<FileToOpen> for ProtobufFile {
   type Error = &'static str;
   fn try_from(file_to_open: FileToOpen) -> Result<Self, &'static str> {
       Ok(ProtobufFile {
           path: file_to_open.path.display().to_string(),
           optional_line_number: file_to_open.line_number.map(|l| OptionalLineNumber::LineNumber(l as i32)),
           optional_cwd: file_to_open.cwd.map(|c| OptionalCwd::Cwd(c.display().to_string()))
       })
   }
}
