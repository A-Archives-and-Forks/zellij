// This file contains conversion code between `EventType` and `ProtobufEventType`
// `EventType` - this is the struct used by both Zellij and Rust plugins
// `ProtobufEventType` - this is the struct generated by the `.proto` file and used for serialization
// across the wasm boundary
//
// SDK authors in other languages should generate their own equivalent structures based on the
// `.proto` specification, and then decode the protobuf over the wire into them

// pub mod generated_api {
//     // this is a compile time asset generated from the `.proto` specification file by Prost to give
//     // us the ProtobufEventType structure we are gathered here to avoid
//     // include!(concat!(env!("OUT_DIR"), "/api.plugin_command.rs"));
//     include!(concat!(env!("OUT_DIR"), "/generated_plugin_api.rs"));
// }

pub use super::generated_api::api::{
    plugin_command::{
        PluginCommand as ProtobufPluginCommand,
        CommandName,
        plugin_command::Payload,
        SubscribePayload,
        UnsubscribePayload,
        OpenFilePayload,
        OpenCommandPanePayload,
        SwitchTabToPayload,
        SetTimeoutPayload,
        ExecCmdPayload,
        PluginMessagePayload,
        SwitchToModePayload,
    },
    event::EventNameList as ProtobufEventNameList,
};

use crate::data::PluginCommand;

use std::convert::TryFrom;
 
impl TryFrom<ProtobufPluginCommand> for PluginCommand {
   type Error = &'static str;
   fn try_from(protobuf_plugin_command: ProtobufPluginCommand) -> Result<Self, &'static str> {
       match CommandName::from_i32(protobuf_plugin_command.name) {
           Some(CommandName::Subscribe) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::SubscribePayload(subscribe_payload)) => {
                       let protobuf_event_list = subscribe_payload.subscriptions;
                       match protobuf_event_list {
                           Some(protobuf_event_list) => {
                               Ok(PluginCommand::Subscribe(protobuf_event_list.try_into()?))
                           },
                           None => Err("malformed subscription event"),
                       }
                   },
                   _ => Err("Mismatched payload for Subscribe")
               }
           }
           Some(CommandName::Unsubscribe) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::UnsubscribePayload(unsubscribe_payload)) => {
                       let protobuf_event_list = unsubscribe_payload.subscriptions;
                       match protobuf_event_list {
                           Some(protobuf_event_list) => {
                               Ok(PluginCommand::Unsubscribe(protobuf_event_list.try_into()?))
                           },
                           None => Err("malformed unsubscription event"),
                       }
                   },
                   _ => Err("Mismatched payload for Unsubscribe")
               }
           }
           Some(CommandName::SetSelectable) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::SetSelectablePayload(should_be_selectable)) => {
                       Ok(PluginCommand::SetSelectable(should_be_selectable))
                   },
                   _ => Err("Mismatched payload for SetSelectable")
               }
           }
           Some(CommandName::GetPluginIds) => {
               if protobuf_plugin_command.payload.is_some() {
                   Err("GetPluginIds should not have a payload")
               } else {
                   Ok(PluginCommand::GetPluginIds)
               }
           }
           Some(CommandName::GetZellijVersion) => {
               if protobuf_plugin_command.payload.is_some() {
                   Err("GetZellijVersion should not have a payload")
               } else {
                   Ok(PluginCommand::GetZellijVersion)
               }
           }
           Some(CommandName::OpenFile) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::OpenFilePayload(file_to_open_payload)) => {
                       match file_to_open_payload.file_to_open {
                           Some(file_to_open) => {
                               Ok(PluginCommand::OpenFile(file_to_open.try_into()?))
                           },
                           None => Err("Malformed open file payload"),
                       }
                   },
                   _ => Err("Mismatched payload for OpenFile")
               }
           }
           Some(CommandName::OpenFileFloating) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::OpenFileFloatingPayload(file_to_open_payload)) => {
                       match file_to_open_payload.file_to_open {
                           Some(file_to_open) => {
                               Ok(PluginCommand::OpenFileFloating(file_to_open.try_into()?))
                           },
                           None => Err("Malformed open file payload"),
                       }
                   },
                   _ => Err("Mismatched payload for OpenFile")
               }
           }
           Some(CommandName::OpenTerminal) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::OpenTerminalPayload(file_to_open_payload)) => {
                       match file_to_open_payload.file_to_open {
                           Some(file_to_open) => {
                               Ok(PluginCommand::OpenTerminal(file_to_open.try_into()?))
                           },
                           None => Err("Malformed open terminal payload"),
                       }
                   },
                   _ => Err("Mismatched payload for OpenTerminal")
               }
           }
           Some(CommandName::OpenTerminalFloating) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::OpenTerminalFloatingPayload(file_to_open_payload)) => {
                       match file_to_open_payload.file_to_open {
                           Some(file_to_open) => {
                               Ok(PluginCommand::OpenTerminalFloating(file_to_open.try_into()?))
                           },
                           None => Err("Malformed open terminal floating payload"),
                       }
                   },
                   _ => Err("Mismatched payload for OpenTerminalFloating")
               }
           }
           Some(CommandName::OpenCommandPane) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::OpenCommandPanePayload(command_to_run_payload)) => {
                       match command_to_run_payload.command_to_run{
                           Some(command_to_run) => {
                               Ok(PluginCommand::OpenCommandPane(command_to_run.try_into()?))
                           },
                           None => Err("Malformed open open command pane payload"),
                       }
                   },
                   _ => Err("Mismatched payload for OpenCommandPane")
               }
           }
           Some(CommandName::OpenCommandPaneFloating) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::OpenCommandPaneFloatingPayload(command_to_run_payload)) => {
                       match command_to_run_payload.command_to_run{
                           Some(command_to_run) => {
                               Ok(PluginCommand::OpenCommandPaneFloating(command_to_run.try_into()?))
                           },
                           None => Err("Malformed open command pane floating payload"),
                       }
                   },
                   _ => Err("Mismatched payload for OpenCommandPaneFloating")
               }
           }
           Some(CommandName::SwitchTabTo) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::SwitchTabToPayload(switch_to_tab_payload)) => {
                       Ok(PluginCommand::SwitchTabTo(switch_to_tab_payload.tab_index as u32))
                   },
                   _ => Err("Mismatched payload for SwitchToTab")
               }
           }
           Some(CommandName::SetTimeout) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::SetTimeoutPayload(set_timeout_payload)) => {
                       Ok(PluginCommand::SetTimeout(set_timeout_payload.seconds))
                   },
                   _ => Err("Mismatched payload for SetTimeout")
               }
           }
           Some(CommandName::ExecCmd) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::ExecCmdPayload(exec_cmd_payload)) => {
                       Ok(PluginCommand::ExecCmd(exec_cmd_payload.command_line))
                   },
                   _ => Err("Mismatched payload for ExecCmd")
               }
           }
           Some(CommandName::PostMessageTo) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::PostMessageToPayload(post_message_to_payload)) => {
                       match post_message_to_payload.message {
                           Some(message) => {
                               Ok(PluginCommand::PostMessageTo(message.try_into()?))
                           },
                           None => Err("Malformed post message to payload"),
                       }
                   },
                   _ => Err("Mismatched payload for PostMessageTo")
               }
           }
           Some(CommandName::PostMessageToPlugin) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::PostMessageToPluginPayload(post_message_to_payload)) => {
                       match post_message_to_payload.message {
                           Some(message) => {
                               Ok(PluginCommand::PostMessageToPlugin(message.try_into()?))
                           },
                           None => Err("Malformed post message to plugin payload"),
                       }
                   },
                   _ => Err("Mismatched payload for PostMessageToPlugin")
               }
           }
           Some(CommandName::HideSelf) => {
               if protobuf_plugin_command.payload.is_some() {
                   return Err("HideSelf should not have a payload");
               }
               Ok(PluginCommand::HideSelf)
           }
           Some(CommandName::ShowSelf) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::ShowSelfPayload(should_float_if_hidden)) => {
                       Ok(PluginCommand::ShowSelf(should_float_if_hidden))
                   },
                   _ => Err("Mismatched payload for ShowSelf")
               }
           }
           Some(CommandName::SwitchToMode) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::SwitchToModePayload(switch_to_mode_payload)) => {
                       match switch_to_mode_payload.input_mode {
                           Some(input_mode) => {
                               Ok(PluginCommand::SwitchToMode(input_mode.try_into()?))
                           },
                           None => Err("Malformed switch to mode payload"),
                       }
                   },
                   _ => Err("Mismatched payload for SwitchToMode")
               }
           }
           Some(CommandName::NewTabsWithLayout) => {
               match protobuf_plugin_command.payload {
                   Some(Payload::NewTabsWithLayoutPayload(raw_layout)) => {
                       Ok(PluginCommand::NewTabsWithLayout(raw_layout))
                   },
                   _ => Err("Mismatched payload for NewTabsWithLayout")
               }
           }
           Some(CommandName::NewTab) => {
               if protobuf_plugin_command.payload.is_some() {
                   return Err("NewTab should not have a payload");
               }
               Ok(PluginCommand::NewTab)
           }
           Some(CommandName::GoToNextTab) => {
               if protobuf_plugin_command.payload.is_some() {
                   return Err("GoToNextTab should not have a payload");
               }
               Ok(PluginCommand::GoToNextTab)
           }
           Some(CommandName::GoToPreviousTab) => {
               if protobuf_plugin_command.payload.is_some() {
                   return Err("GoToPreviousTab should not have a payload");
               }
               Ok(PluginCommand::GoToPreviousTab)
           }
           None => Err("Unrecognized plugin command")
       }
   }
}

impl TryFrom<PluginCommand> for ProtobufPluginCommand {
   type Error = &'static str;
   fn try_from(plugin_command: PluginCommand) -> Result<Self, &'static str> {
       match plugin_command {
           PluginCommand::Subscribe(subscriptions) => {
               let subscriptions: ProtobufEventNameList = subscriptions.try_into()?;
               Ok(ProtobufPluginCommand {
                   name: CommandName::Subscribe as i32,
                   payload: Some(Payload::SubscribePayload(SubscribePayload {
                       subscriptions: Some(subscriptions)
                   }))
               })
           }
           PluginCommand::Unsubscribe(subscriptions) => {
               let subscriptions: ProtobufEventNameList = subscriptions.try_into()?;
               Ok(ProtobufPluginCommand {
                   name: CommandName::Unsubscribe as i32,
                   payload: Some(Payload::UnsubscribePayload(UnsubscribePayload {
                       subscriptions: Some(subscriptions)
                   }))
               })
           }
           PluginCommand::SetSelectable(should_be_selectable) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::SetSelectable as i32,
                   payload: Some(Payload::SetSelectablePayload(should_be_selectable)),
               })
           }
           PluginCommand::GetPluginIds => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::GetPluginIds as i32,
                   payload: None,
               })
           }
           PluginCommand::GetZellijVersion => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::GetZellijVersion as i32,
                   payload: None,
               })
           }
           PluginCommand::OpenFile(file_to_open) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::OpenFile as i32,
                   payload: Some(Payload::OpenFilePayload(OpenFilePayload {
                       file_to_open: Some(file_to_open.try_into()?),
                   }))
               })
           }
           PluginCommand::OpenFileFloating(file_to_open) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::OpenFileFloating as i32,
                   payload: Some(Payload::OpenFileFloatingPayload(OpenFilePayload {
                       file_to_open: Some(file_to_open.try_into()?),
                   }))
               })
           }
           PluginCommand::OpenTerminal(cwd) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::OpenTerminal as i32,
                   payload: Some(Payload::OpenTerminalPayload(OpenFilePayload {
                       file_to_open: Some(cwd.try_into()?),
                   }))
               })
           }
           PluginCommand::OpenTerminalFloating(cwd) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::OpenTerminalFloating as i32,
                   payload: Some(Payload::OpenTerminalFloatingPayload(OpenFilePayload {
                       file_to_open: Some(cwd.try_into()?),
                   }))
               })
           }
           PluginCommand::OpenCommandPane(command_to_run) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::OpenCommandPane as i32,
                   payload: Some(Payload::OpenCommandPanePayload(OpenCommandPanePayload {
                       command_to_run: Some(command_to_run.try_into()?),
                   }))
               })
           }
           PluginCommand::OpenCommandPaneFloating(command_to_run) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::OpenCommandPaneFloating as i32,
                   payload: Some(Payload::OpenCommandPaneFloatingPayload(OpenCommandPanePayload {
                       command_to_run: Some(command_to_run.try_into()?),
                   }))
               })
           }
           PluginCommand::SwitchTabTo(tab_index) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::SwitchTabTo as i32,
                   payload: Some(Payload::SwitchTabToPayload(SwitchTabToPayload {
                       tab_index: tab_index as i32
                   })),
               })
           }
           PluginCommand::SetTimeout(seconds) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::SetTimeout as i32,
                   payload: Some(Payload::SetTimeoutPayload(SetTimeoutPayload {
                       seconds,
                   })),
               })
           }
           PluginCommand::ExecCmd(command_line) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::ExecCmd as i32,
                   payload: Some(Payload::ExecCmdPayload(ExecCmdPayload {
                       command_line
                   })),
               })
           }
           PluginCommand::PostMessageTo(plugin_message) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::PostMessageTo as i32,
                   payload: Some(Payload::PostMessageToPayload(PluginMessagePayload {
                       message: Some(plugin_message.try_into()?),
                   })),
               })
           }
           PluginCommand::PostMessageToPlugin(plugin_message) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::PostMessageToPlugin as i32,
                   payload: Some(Payload::PostMessageToPluginPayload(PluginMessagePayload {
                       message: Some(plugin_message.try_into()?),
                   })),
               })
           }
           PluginCommand::HideSelf => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::HideSelf as i32,
                   payload: None,
               })
           }
           PluginCommand::ShowSelf(should_float_if_hidden) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::ShowSelf as i32,
                   payload: Some(Payload::ShowSelfPayload(should_float_if_hidden)),
               })
           }
           PluginCommand::SwitchToMode(input_mode) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::SwitchToMode as i32,
                   payload: Some(Payload::SwitchToModePayload(SwitchToModePayload {
                       input_mode: Some(input_mode.try_into()?),
                   })),
               })
           }
           PluginCommand::NewTabsWithLayout(raw_layout) => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::NewTabsWithLayout as i32,
                   payload: Some(Payload::NewTabsWithLayoutPayload(raw_layout)),
               })
           }
           PluginCommand::NewTab => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::NewTab as i32,
                   payload: None,
               })
           }
           PluginCommand::GoToNextTab => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::GoToNextTab as i32,
                   payload: None,
               })
           }
           PluginCommand::GoToPreviousTab => {
               Ok(ProtobufPluginCommand {
                   name: CommandName::GoToPreviousTab as i32,
                   payload: None,
               })
           }
       }
   }
}
